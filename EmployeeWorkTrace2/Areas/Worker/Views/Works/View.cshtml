@{
    Layout = "_Layout";
    ViewData["Title"] = "My Work View";
}

@model Works
<div class="card shadow border-0 mt-4">
    <div class="card-header bg-secondary bg-gradient m-lg-0 py-3">
        <div class="row">
            <div class="col-12 text-center">
                <h1 class="text-white py-2">@Model.WorkName</h1>
            </div>
        </div>
    </div>
    <div class="card-body p-4">
        <p><strong>Worker:</strong> @Model.WorkerName</p>

        <hr />

        @if (Model.WorkItems != null && Model.WorkItems.Any())
        {
            <div class="mb-3">
                <h2>Uploaded Files</h2>
                @foreach (var item in Model.WorkItems)
                {
                    <div class="mb-2">
                        <a href="/Uploads/@item.ItemName" target="_blank">
                            @item.ItemName (@item.CreationDate)
                        </a>
                    </div>
                }
            </div>
        }

        <h3 class="mt-4">Work Details</h3>
        <dl class="row">
            <dt class="col-sm-4">Work ID</dt>
            <dd class="col-sm-8">@Model.WorkId</dd>
            <dt class="col-sm-4">Created On</dt>
            <dd class="col-sm-8">@Model.WorkCreationDate.Value.ToShortDateString()</dd>
            <dt class="col-sm-4">Planned End Date</dt>
            <dd class="col-sm-8">@Model.WorkEndDate.Value.ToShortDateString()</dd>
            <dt class="col-sm-4">Description</dt>
            <dd class="col-sm-8">@Html.Raw(Model.Description)</dd>
            <div id="workStateContainer">
                <span class="work-state-text">Work State: </span>
                <dd class="col-sm-8">
                    <button id="workStateButton" class="work-state-button">@Model.WorkState</button>
                    <script src="~/js/site.js" defer></script>
                </dd>
            </div>
        </dl>
        <div id="discussion-board" class="mt-4">
            <h2>Discussion</h2>
            <div id="discussion-messages">
            </div>
            <hr />
            <div id="new-message-area">
                <textarea id="message-input" placeholder="Type your message..."></textarea>
                <button id="send-message-btn">Send</button>
            </div>
        </div>

        <a asp-controller="Works" asp-action="Works" class="btn btn-outline-secondary mt-3">
            Back To Works
        </a>
    </div>
</div>

</div>
@section Scripts{
    <script>
        $(document).ready(function () {
            const workId = @Model.WorkId;
            // Load initial messages and setup updating on interval
            fetchMessages();
            setInterval(fetchMessages, 5000); // Update messages every 5 seconds

            $('#send-message-btn').click(function () {
                sendMessage();
            });

            function fetchMessages() {
                $.ajax({
                    url: '/Worker/Works/GetDiscussionMessages',
                    type: 'GET',
                    data: { workId: workId },
                    success: displayMessages
                });
            }

            function displayMessages(messages) {
                $('#discussion-messages').empty();
                messages.forEach(message => {
                    let messageHtml = `
                        <div class="message">
                            <strong>${message.sender.name}</strong> (${message.creationDate.toLocaleString()}):
                            <p>${message.messageText}</p>
                        </div>
                    `;
                    $('#discussion-messages').append(messageHtml);
                    // Scroll to the bottom of the discussion board after adding message
                    $('#discussion-board').scrollTop($('#discussion-board')[0].scrollHeight);
                });
            }

            function sendMessage() {
                let messageText = $('#message-input').val();

                $.ajax({
                    url: '/Worker/Works/CreateMessage',
                    type: 'POST',
                    data: { workId: workId, messageText: messageText },
                    success: function () {
                        $('#message-input').val('');
                    },
                    error: function () {
                        alert('An error occurred while sending the message.');
                    }
                });
            }
            $('#workStateButton').click(function () {
                let currentState = $(this).text();
                let workId = @Model.WorkId; // Retrieve the Work ID

                // Determine the next state (Example cyclical progression)
                let newState = determineNextState(currentState);

                // AJAX Call to update the state in the backend
                $.ajax({
                    url: '/Worker/Works/UpdateWorkState', // Create UpdateWorkState action in your controller
                    type: 'POST',
                    data: { workId: workId, newState: newState },
                    success: function () {
                        $('#workStateButton').text(newState); // Update the button text
                        // Remove all existing state classes:
                        $('#workStateButton').removeClass('startwork underdevelopment codereview completed');

                        // Add the new state class:
                        $('#workStateButton').addClass(newState.replace(' ', '-').toLowerCase());
                    },
                    error: function () {
                        alert('An error occurred updating the state.');
                    }
                });
            });

            // Simple function to cycle through work states
            function determineNextState(currentState) {
                switch (currentState) {
                    case 'StartWork': return 'UnderDevelopment';
                    case 'UnderDevelopment': return 'CodeReview';
                    case 'CodeReview': return 'Completed';
                    case 'Completed': return 'StartWork'; // Reset
                    default: return 'StartWork';
                }
            }
        });
    </script>
}